#!/usr/bin/env bash
# deepdive-compile -- Compiles DeepDive source code into executables under run/
##
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2015-11-03
set -euo pipefail

: ${DEEPDIVE_CONFIG_EXTRA:=}  # deepdive.conf can be augmented with extra content

DEEPDIVE_APP=$(find-deepdive-app)
export DEEPDIVE_APP
cd "$DEEPDIVE_APP"

. load-db-driver.sh  # XXX necessary for hocon2json to resolve some environment variables, which may be irrelevant once Scala codebase is dropped
mkdir -p run

# create a fresh working directory for compiling
compileDir=$(date +%Y%m%d/%H%M%S.%N)
mkdir -p "run/$compileDir"
# log all the compilation steps and stderr with timestamps
exec 3>&2 2> >(logging-with-ts run/"$compileDir"/compile.log >&2)
STEP() { echo "$@"; } >&2
# bookkeep some symlinks
cleanup() {
    cd "$DEEPDIVE_APP"/run
    [[ ! COMPILING -ef "$compileDir" ]] || rm -f COMPILING
} >&3
abort() {
    cd "$DEEPDIVE_APP"
    [[ ! -e run/"$compileDir" ]] || ln -sfnv "$compileDir" run/ABORTED.COMPILING
} >&3
trap cleanup EXIT
trap abort ERR HUP QUIT INT TERM
ln -sfnv "$compileDir" run/COMPILING >&2

# augment PATH to access compiler components
PATH="$DEEPDIVE_HOME"/util/compile-config:"$PATH"
PATH="$DEEPDIVE_HOME"/util/compile-code:"$PATH"
PATH="$DEEPDIVE_HOME"/util/compile-dependencies:"$PATH"
export DEEPDIVE_ERROR_PREFIX="[ERROR] "

## compile a full deepdive.conf from source code
STEP "Parsing DeepDive application ($DEEPDIVE_APP) to generate:"
STEP " run/compiled/schema.json"
# compile schema in JSON
touch run/"$compileDir"/schema.json run/"$compileDir"/deepdive.conf
if [[ -r app.ddlog ]]; then
    STEP "  from app.ddlog"
    ddlog export-schema app.ddlog
else
    echo '{}'
fi |
if [[ -r schema.json && -s schema.json ]]; then
    # merge user's schema.json
    STEP "  from schema.json"
    SCHEMA_JSON="$(cat)" \
    jq '(env.SCHEMA_JSON | fromjson) + .' schema.json
else
    cat
fi >run/"$compileDir"/schema.json
STEP " run/compiled/deepdive.conf"
{
# compile DDlog rules
if [[ -r app.ddlog ]]; then
    STEP "  from app.ddlog"
    ddlog compile app.ddlog
fi
# append user's deepdive.conf
if [[ -r deepdive.conf ]]; then
    STEP "  from deepdive.conf"
    cat deepdive.conf
fi
# any extra config present in DEEPDIVE_CONFIG_EXTRA environment gets more priority
if [[ -n "$DEEPDIVE_CONFIG_EXTRA" ]]; then
    STEP "  from \$DEEPDIVE_CONFIG_EXTRA"
    echo "$DEEPDIVE_CONFIG_EXTRA"
fi
# include the schema as well
echo -n "deepdive.schema "
cat run/"$compileDir"/schema.json
} >run/"$compileDir"/deepdive.conf
cd run/"$compileDir"
# produce a JSON from compiled deepdive.conf
STEP " run/compiled/deepdive.conf.json"
(
# XXX some bogus variables in deepdive.conf added by DDlog compiler or in deepdive-default.conf
APP_HOME='"$DEEPDIVE_APP"'
PIPELINE=
PARALLELISM=1
INPUT_BATCH_SIZE=100000
export APP_HOME PIPELINE PARALLELISM INPUT_BATCH_SIZE
# convert HOCON into JSON
hocon2json \
    deepdive.conf \
    "$DEEPDIVE_HOME"/etc/deepdive-default.conf
) >deepdive.conf.json

STEP "Normalizing and adding built-in processes to the data flow to compile:"
config=deepdive.conf.json
for cc in "$DEEPDIVE_HOME"/util/compile-config/compile-config-*; do
    cc=${cc##*/}
    name=${cc#compile-config-}
    output=config-$name.json
    STEP " run/compiled/$output"
    "$cc" "$config" >"$output"
    config=$output  # process the output with the next config compiler
done
STEP " run/compiled/config.json"
ln -sfn "$config" config.json

STEP "Validating run/compiled/config.json:"
deepdive-check -a -c "$PWD"/config.json 2>&1 | sed 's/^/ /' >&2

STEP "Analyzing data flow dependencies to compile:"
# derive a dependency graph from the extractors, factors, pipelines defined in deepdive.conf
compile-config2dependencies <config.json >dependencies.json
# compile a Makefile from the dependency graph
STEP " run/Makefile"
compile-dependencies2make <dependencies.json -r >Makefile
# compile an SVG from the dependency graph
STEP " run/compiled/dataflow.svg"
compile-dependencies2dot <dependencies.json -r >dataflow.dot
dot -Tsvg <dataflow.dot >dataflow.svg
STEP "  (file://$(pwd -P)/dataflow.svg)"  # XXX a handy file: URL for opening in a browser

STEP "Compiling executable code into:"
# compile extractors and factors under process/ and factor/
for cc in "$DEEPDIVE_HOME"/util/compile-code/compile-code-*; do
    cc=${cc##*/}
    name=${cc#compile-code-}
    STEP " run/compiled/code-$name.json"
    "$cc" config.json >code-$name.json
done
# TODO check path name collisions in code-*.json
# mark everything compiled as read-only
chmod a-w *

# generate actual code under run/
cd "$DEEPDIVE_APP"/run
STEP "Generating executable files:"
cat "$compileDir"/code-*.json |
compile-codegen
ln -sfn compiled/Makefile .

# point to the successfully compiled one, leaving the previous one as backup
{
    cd "$DEEPDIVE_APP"
    [[ ! -e run/compiled ]] || mv -fv --no-target-directory run/compiled run/compiled~
    ln -sfnv "$compileDir" run/compiled
} >&2
