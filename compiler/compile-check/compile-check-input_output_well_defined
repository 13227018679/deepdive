#!/usr/bin/env jq-f
# compile-check-input_output_well_defined -- Checks if all inputs and outputs of compiled processes are well-defined
##
.deepdive_ as $deepdive |

# a handy map for checking whether a relation has a defining process
( $deepdive.extraction.extractors
| with_entries({ key: (.value.output_ // empty), value: .key })
) as $process_defining_the_relation |

# check every compiled process
# TODO move compiled processes into a separate object, e.g., $deepdive.execution.processes?
$deepdive.extraction.extractors | to_entries[] |
.key as $extractorName | .value |

# if inputs are all output by another process
(
    select(.input_ | length > 0) |
    [ .input_[]
    | select(
        (startswith("data/") and in($process_defining_the_relation)
        ) | not)
    ] |
    if length == 0 then "\($extractorName) inputs are all output by other processes"
    else error("\($extractorName) depends on undefined inputs: \(map("'\(.)'") | join(" "))")
    end
),

# if output are defined in the schema
(
    .output_ // empty | tostring |
    if startswith("data/") and (ltrimstr("data/") | in($deepdive.schema.relations)
                                                    # XXX assume user is doing the right thing if schema.json is empty
                                                    or ($deepdive.schema.relations | length == 0))
    then
        "\($extractorName) output_relation is defined in schema.json: '\(ltrimstr("data/"))'"
    elif startswith("model/") or startswith("data/model/") then
        "\($extractorName) output is not for database: '\(.)'"
    else error("\($extractorName) has output_relation undefined in schema.json: '\(.)'")
    end
),

empty
