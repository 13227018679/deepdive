#! /usr/bin/env python
# Generate create table statement given a ddlog exported schema and a table name.
# Usage: ddlog_initdb SCHEMA.JSON TABLE_NAME

import json, sys

def generate_create_table_sql(schema, table):
  columns_json = schema["relations"][table]["columns"]
  # variable relation
  if "variable_type" in schema["relations"][table]:
    columns = range(len(columns_json) + 2)
    columns[-2] = "id bigint"
    label_type = "boolean" if schema["relations"][table]["variable_type"] == "boolean" else "int"
    columns[-1] = "label " + label_type
  else:
    columns = range(len(columns_json))
  for k, v in columns_json.iteritems():
    columns[v["index"]] = "%s %s" %(k, v["type"])
  return "DROP TABLE IF EXISTS %s CASCADE; CREATE TABLE %s(%s);" %(table, table, ", ".join(columns))

def main():
  # load schema.json
  with open(sys.argv[1]) as schema_file:
    schema = json.load(schema_file)
  # initialize all tables
  if len(sys.argv) <= 2:
    print ' '.join([generate_create_table_sql(schema, table) for table in schema["relations"].keys()])
  else:
    table = sys.argv[2]
    # the given table is not in the schema, do nothing
    if table not in schema["relations"]:
      print ""
    else:
      print generate_create_table_sql(schema, table)

if __name__ == "__main__":
  main()
