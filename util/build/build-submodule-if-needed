#!/usr/bin/env bash
# build-submodule-if-needed -- Builds a Git submodule if necessary
# > util/build/build-submodule-if-needed SUBMODULE_PATH
set -euo pipefail

Submodule=${1:?A path to a Git submodule must be given}

# some implied file paths
build_info=.build/submodule/"$Submodule".built
build_sh="$Submodule".build.sh

# some sanity checks
commit_current=$(git submodule status "$Submodule" | awk '{print $1}') || {
    echo >&2 "$Submodule: Not a submodule?"
    false
}
[[ -x "$build_sh" ]] || {
    echo >&2 "$build_sh: No build executable found for the submodule"; false
}

# make sure the submodule is there
[[ -e "$Submodule"/.git ]] ||
    git submodule update --init "$Submodule"

# how to actually build the submodule
build_submodule() {
    bash -eux "$build_sh"
    mkdir -p "$(dirname "$build_info")"
    git submodule status "$Submodule" | awk '{print $1}' >"$build_info"
    exit
}

# if the submodule is dirty, just build it
is_clean=$(
    cd "$Submodule"
    if [[ $(git status --porcelain | wc -l) -eq 0 ]]; then
        echo true
    else
        echo false
    fi
)
$is_clean || build_submodule

# if previous build info exists, only proceed to build if something's new
[[ -e "$build_info" ]] || build_submodule
commit_built=$(head -1 <"$build_info")
[[ "$commit_built" = "$commit_current" ]] || build_submodule

echo >&2 "$Submodule: $commit_built already built"
