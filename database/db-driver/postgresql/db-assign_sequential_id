#!/usr/bin/env bash
# db-assign_sequential_id -- Assigns a unique integer to every row for a table using PostgreSQL sequence generator
# > eval "$(db-parse "$url")"
# > db-assign_sequential_id TABLE COLUMN BEGIN_ID [INCREMENT] [ORDER_BY]
##
set -euo pipefail

[[ $# -gt 0 ]] || usage "$0" "Missing TABLE"
[[ $# -gt 1 ]] || usage "$0" "Missing COLUMN"
[[ $# -gt 2 ]] || usage "$0" "Missing BEGIN_ID"
Table=$1 Column=$2 BeginId=$3 Increment=${4:-1} OrderBy=${5:-}

[[ $Increment -ne 0 ]] || usage "$0" "INCREMENT must be non-zero"

if [[ -z $OrderBy ]]; then # no constraint for ordering rows
    # Use PostgreSQL sequence generator named after the table and column
    # See: http://www.postgresql.org/docs/current/static/sql-createsequence.html
    seq="dd_seq_${Table}_${Column}"
    minMaxValues=
    if   [[ $Increment -gt 0 && $BeginId -le 0 ]]; then minMaxValues="MINVALUE $BeginId NO MAXVALUE"
    elif [[ $Increment -lt 0 && $BeginId -ge 0 ]]; then minMaxValues="NO MINVALUE MAXVALUE $BeginId"
    fi
    db-execute "
        DROP SEQUENCE IF EXISTS $seq CASCADE;
        CREATE TEMPORARY SEQUENCE $seq INCREMENT BY $Increment $minMaxValues START $BeginId NO CYCLE;

        UPDATE $Table SET $Column = nextval('$seq');
    "

else # ORDER BY given COLUMNs

    # find existing columns in the target table
    eval "columns=(
    $(db-execute '\d '"$Table" --tuples-only --no-align --field-separator=$'\t' | cut -f1 # TODO | escape4sh
    )
    )"
    set --
    for col in "${columns[@]}"; do
        if [[ $col = $Column ]]; then
            # use ROW_NUMBER() OVER ORDER BY with given clause
            set -- "$@" "$BeginId + $Increment * ((ROW_NUMBER() OVER (ORDER BY $OrderBy)) - 1) AS \"${col//\"/\"\"}\""
        else
            set -- "$@" "\"${col//\"/\"\"}\""
        fi
    done

    # create a temporary table like the original one
    newTable="dd_tmpseq_$Table"
    db-create-table-like "$newTable" "$Table"

    # copy rows into the temporary and replace the target table
    columnsToProject=$(printf "%s, " "$@")
    columnsToProject=${columnsToProject%, }  # dropping last comma
    db-execute "
        INSERT INTO $newTable SELECT $columnsToProject FROM $Table;
        DROP TABLE $Table;
        ALTER TABLE $newTable RENAME TO $Table;
    "

fi
