#!/usr/bin/env bash
# db-create -- Creates a table or view with given definition, coping with existing ones
# > eval "$(db-parse "$url")"
#
# > db-create table TABLE as SELECT_QUERY
# > db-create view  TABLE as SELECT_QUERY
# Creates a table or view named TABLE with the result of given SELECT query,
# dropping existing table or view with the same name.
#
# > db-create table TABLE [COLUMN:TYPE[:CONSTRAINT]]...
# Creates a new table named TABLE with given column definitions.
#
# > db-create table TABLE like ANOTHER_TABLE
# Creates a new table named TABLE after the schema of ANOTHER_TABLE.
##
set -euo pipefail

[[ $# -gt 0 ]] || usage "$0" "What to create (table or view) must be given"
What=$1; shift

[[ $# -gt 0 ]] || usage "$0" "Missing TABLE name"
Table=$1; shift
# TODO double quote table names and column names?

case $What in
    table)
        [[ $# -gt 0 ]] || usage "$0" "Either SELECT_QUERY or COLUMN:TYPEs must be specified"
        case $1 in
            as) # create as query
                [[ $# -gt 1 ]] || usage "$0" "Missing arguments"
                Query=$2
                tableDef=" AS $Query"
                ;;

            like) # create like another table
                [[ $# -gt 1 ]] || usage "$0" "Missing arguments"
                AnotherTable=$2
                tableDef=" (LIKE $AnotherTable INCLUDING ALL)" # preserving all bells and whistles
                ;;

            *) # create table with column definitions
                tableDef=
                for columnDef; do
                    # parse COLUMN:TYPE[:CONSTRAINT]
                    column=${columnDef%%:*}
                    typeConstraint=${columnDef#$column}
                    typeConstraint=${typeConstraint#:}
                    [[ -n "$typeConstraint" ]] || usage "$0" "$columnDef: Missing :TYPE[:CONSTRAINT]"
                    type=${typeConstraint%%:*}
                    constraint=${typeConstraint#$type}
                    constraint=${constraint#:}
                    tableDef+=", $column $type $constraint"
                done
                tableDef="( ${tableDef#,} )"
        esac
        # make sure no view is on our way
        db-execute "DROP VIEW IF EXISTS $Table CASCADE;" || true
        # actually create the table
        db-execute "
            DROP TABLE IF EXISTS $Table CASCADE;
            CREATE TABLE $Table $tableDef;
        "
        ;;

    view)
        [[ $# -gt 1 && $1 = "as" ]] || usage "$0" "SELECT_QUERY for the view must be specified, followed by 'as'"
        Query=$2
        # make sure no table is on our way
        db-execute "DROP TABLE IF EXISTS $Table CASCADE;" || true
        # actually create the view
        db-execute "
            DROP VIEW IF EXISTS $Table CASCADE;
            CREATE VIEW $Table AS $Query;
        "
        ;;

    *) error "$What cannot be created: Only 'table' or 'view' can be created"
esac
