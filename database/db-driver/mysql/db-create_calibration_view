#!/usr/bin/env bash
# db-create_calibration_view -- Creates a variable's *_calibration view in a MySQL database
# > eval "$(db-parse "$url")"
# > export DEEPDIVE_CALIBRATION_NUM_BUCKETS=10
# > db-create_calibration_view TABLE COLUMN
##
set -euo pipefail

table=${1:?The TABLE holding the variable must be given, e.g., has_spouse}
column=${2:?The COLUMN holding the variable must be given, e.g., is_true}

: ${DEEPDIVE_CALIBRATION_NUM_BUCKETS:=10}
num_buckets=$DEEPDIVE_CALIBRATION_NUM_BUCKETS

deepdive sql "
DROP VIEW IF EXISTS    dd_bucketed_${table}_${column}_inference CASCADE;
CREATE OR REPLACE VIEW dd_bucketed_${table}_${column}_inference AS
    SELECT ${column} AS label
         , CASE
             WHEN expectation = 1 THEN $(($num_buckets - 1))
             ELSE FLOOR(expectation * ${num_buckets})
           END AS bucket
    FROM ${table}_${column}_inference
;

DROP VIEW IF EXISTS    dd_bucketed_${table}_${column}_inference_all CASCADE;
CREATE OR REPLACE VIEW dd_bucketed_${table}_${column}_inference_all AS
    SELECT bucket, COUNT(*) AS count
      FROM dd_bucketed_${table}_${column}_inference
     GROUP BY bucket
;

DROP VIEW IF EXISTS    dd_bucketed_${table}_${column}_inference_positive CASCADE;
CREATE OR REPLACE VIEW dd_bucketed_${table}_${column}_inference_positive AS
    SELECT bucket, COUNT(*) AS count
      FROM dd_bucketed_${table}_${column}_inference
     WHERE label = true
     GROUP BY bucket
;

DROP VIEW IF EXISTS    dd_bucketed_${table}_${column}_inference_negative CASCADE;
CREATE OR REPLACE VIEW dd_bucketed_${table}_${column}_inference_negative AS
    SELECT bucket, COUNT(*) AS count
      FROM dd_bucketed_${table}_${column}_inference
     WHERE label = false
     GROUP BY bucket
;

DROP VIEW IF EXISTS    ${table}_${column}_calibration CASCADE;
CREATE OR REPLACE VIEW ${table}_${column}_calibration AS
    SELECT universe.bucket                             AS bucket
         , universe.count                              AS num_variables
         , positive.count                              AS num_correct
         , negative.count                              AS num_incorrect
         , universe.bucket        / $num_buckets.      AS probability_lo
         , (universe.bucket +  1) / ${num_buckets}.    AS probability_hi
         , (universe.bucket + .5) / ${num_buckets}.    AS probability
         , 1.0 * positive.count / (
           positive.count + negative.count)            AS accuracy
         , positive.count + negative.count             AS num_predictions_test
         , universe.count                              AS num_predictions_whole
      FROM dd_bucketed_${table}_${column}_inference_all universe
      LEFT JOIN dd_bucketed_${table}_${column}_inference_positive positive ON universe.bucket = positive.bucket
      LEFT JOIN dd_bucketed_${table}_${column}_inference_negative negative ON universe.bucket = negative.bucket
     ORDER BY universe.bucket
;
"
