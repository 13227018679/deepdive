
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        
      }
    

          deepdive.extraction.extractors.extraction_rule_1 {
            sql: """ DROP TABLE IF EXISTS b CASCADE;
            CREATE TABLE
            b(k int,
 p text,
 q text,
 r int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_0 {
            sql: """ DROP TABLE IF EXISTS a CASCADE;
            CREATE TABLE
            a(k int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_2 {
            sql: """ DROP TABLE IF EXISTS c CASCADE;
            CREATE TABLE
            c(s text,
 n int,
 t text)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE b;
          TRUNCATE a;
          TRUNCATE c;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_3 {
        sql: """ DROP VIEW IF EXISTS Q;
        CREATE VIEW Q AS 
            SELECT DISTINCT 'test' :: TEXT, 123, R0.k AS "a.R0.k" , unnest(R1.q)
            FROM a R0, b R1, c R2
        WHERE R1.k = R0.k  AND R2.s = R1.p || R1.q AND R2.n = 10 AND R2.t = 'foo'  AND ((R1.r > 100) OR (R1.r < 20 AND R1.r > 10)) UNION ALL 
            SELECT  R1.p AS "b.R1.p" , R1.q AS "b.R1.q" , MAX(R1.r)
            FROM a R0, b R1
        WHERE R1.k = R0.k  
        GROUP BY R1.p, R1.q
        """
        style: "sql_extractor"
          
      }
    
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_1, extraction_rule_0, extraction_rule_2]
deepdive.pipeline.pipelines.extraction: [extraction_rule_3]
