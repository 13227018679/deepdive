
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        
      }
    

      deepdive.extraction.extractors.ext_E {
        sql: """ DROP VIEW IF EXISTS E;
        CREATE VIEW E AS SELECT (R0.k :: INT) AS column_0
FROM b R0
        
        """
          output_relation: "E"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_X {
        sql: """ DROP VIEW IF EXISTS X;
        CREATE VIEW X AS SELECT R0.k AS column_0
FROM b R0, c R1
        WHERE R1.n = R0.k 
        """
          output_relation: "X"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_N {
        sql: """ DROP VIEW IF EXISTS N;
        CREATE VIEW N AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0 WHERE R1_0.n = R0.k  AND R1_0.s > 'a')
        """
          output_relation: "N"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_T {
        sql: """ DROP VIEW IF EXISTS T;
        CREATE VIEW T AS SELECT R0.k AS column_0
FROM b R0 LEFT OUTER JOIN c R1_0 ON R1_0.n = R0.k  AND R1_0.s > R0.p
        WHERE R1_0.s > R0.p
        """
          output_relation: "T"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_J {
        sql: """ DROP VIEW IF EXISTS J;
        CREATE VIEW J AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 OR (NOT R0.k > 50))
        """
          output_relation: "J"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_U {
        sql: """ DROP VIEW IF EXISTS U;
        CREATE VIEW U AS SELECT R0_0.k AS column_0
FROM b R0_0 ON  FULL OUTER JOIN c R1_0 ON R1_0.n = R0_0.k 
        
        """
          output_relation: "U"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_F {
        sql: """ DROP VIEW IF EXISTS F;
        CREATE VIEW F AS SELECT ((R0.k :: INT) + (R0.r :: INT)) AS column_0
FROM b R0
        
        """
          output_relation: "F"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_A {
        sql: """ DROP VIEW IF EXISTS A;
        CREATE VIEW A AS SELECT (R0.k + (R0.r * (R0.k + R0.r))) AS column_0
FROM b R0
        
        """
          output_relation: "A"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_M {
        sql: """ DROP VIEW IF EXISTS M;
        CREATE VIEW M AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0 WHERE R1_0.n = R0.k )
        """
          output_relation: "M"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_I {
        sql: """ DROP VIEW IF EXISTS I;
        CREATE VIEW I AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 OR (R0.k > 50 AND R0.r < 10))
        """
          output_relation: "I"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_G {
        sql: """ DROP VIEW IF EXISTS G;
        CREATE VIEW G AS SELECT R0.k AS column_0
FROM b R0
        WHERE (R0.k + R0.r) = 100
        """
          output_relation: "G"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_V {
        sql: """ DROP VIEW IF EXISTS V;
        CREATE VIEW V AS SELECT R0.n AS column_0
FROM c R0, a R1
        WHERE R1.k = R0.n 
        """
          output_relation: "V"
        style: "sql_extractor"
          
          input_relations: [
            c
            a
          ]
      }
    

      deepdive.extraction.extractors.ext_Q {
        sql: """ DROP VIEW IF EXISTS Q;
        CREATE VIEW Q AS SELECT DISTINCT ('test' :: TEXT) AS column_0, 123 AS column_1, R0.k AS column_2, unnest(R1.q) AS column_3
FROM a R0, b R1, c R2
        WHERE R1.k = R0.k  AND R2.s = (R1.p || R1.q) AND R2.n = 10 AND R2.t = 'foo' AND (R1.r > 100 OR ((NOT R1.r < 20) AND R1.r < 50))
        """
          output_relation: "Q"
        style: "sql_extractor"
          
          input_relations: [
            a
            b
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_L {
        sql: """ DROP VIEW IF EXISTS L;
        CREATE VIEW L AS SELECT DISTINCT R0.k AS column_0
FROM b R0
        LIMIT 100
        """
          output_relation: "L"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_B {
        sql: """ DROP VIEW IF EXISTS B;
        CREATE VIEW B AS SELECT func((R0.k + (R0.r + R0.k))) AS column_0
FROM b R0
        
        """
          output_relation: "B"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_P {
        sql: """ DROP VIEW IF EXISTS P;
        CREATE VIEW P AS SELECT R1.p AS column_0, R1.q AS column_1, MAX(R1.r) AS column_2
FROM a R0, b R1
        WHERE R1.k = R0.k 
        GROUP BY R1.p, R1.q
        """
          output_relation: "P"
        style: "sql_extractor"
          
          input_relations: [
            a
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_C {
        sql: """ DROP VIEW IF EXISTS C;
        CREATE VIEW C AS SELECT func(func(func(R0.k))) AS column_0
FROM b R0
        
        """
          output_relation: "C"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_H {
        sql: """ DROP VIEW IF EXISTS H;
        CREATE VIEW H AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 AND R0.k > 50)
        """
          output_relation: "H"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_W {
        sql: """ DROP VIEW IF EXISTS W;
        CREATE VIEW W AS SELECT R0.k AS column_0
FROM a R0
        WHERE NOT EXISTS (SELECT 1 FROM c R1_0 WHERE NOT (R1_0.n < R0.k))
        """
          output_relation: "W"
        style: "sql_extractor"
          
          input_relations: [
            a
            c
          ]
      }
    

      deepdive.extraction.extractors.ext_K {
        sql: """ DROP VIEW IF EXISTS K;
        CREATE VIEW K AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 AND ((NOT R0.k > 50) OR R0.k = 40))
        """
          output_relation: "K"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_O {
        sql: """ DROP VIEW IF EXISTS O;
        CREATE VIEW O AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0, a R1_1 WHERE R1_0.n = R0.k  AND R1_1.k = R0.k )
        """
          output_relation: "O"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
            a
          ]
      }
    

      deepdive.extraction.extractors.ext_D {
        sql: """ DROP VIEW IF EXISTS D;
        CREATE VIEW D AS SELECT (func((R0.k * func2((R0.r + R0.k)))) + R0.k) AS column_0
FROM b R0
        
        """
          output_relation: "D"
        style: "sql_extractor"
          
          input_relations: [
            b
          ]
      }
    

      deepdive.extraction.extractors.ext_S {
        sql: """ DROP VIEW IF EXISTS S;
        CREATE VIEW S AS SELECT R0.k AS column_0
FROM b R0 LEFT OUTER JOIN c R1_0 ON R1_0.n = R0.k 
        
        """
          output_relation: "S"
        style: "sql_extractor"
          
          input_relations: [
            b
            c
          ]
      }
    
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_M
  ext_Q
  ext_B
  ext_U
  ext_F
  ext_I
  ext_N
  ext_T
  ext_A
  ext_P
  ext_K
  ext_E
  ext_W
  ext_J
  ext_D
  ext_O
  ext_L
  ext_G
  ext_X
  ext_S
  ext_C
  ext_V
  ext_H
]
deepdive.pipeline.pipelines.endtoend: [
  ext_M
  ext_Q
  ext_B
  ext_U
  ext_F
  ext_I
  ext_N
  ext_T
  ext_A
  ext_P
  ext_K
  ext_E
  ext_W
  ext_J
  ext_D
  ext_O
  ext_L
  ext_G
  ext_X
  ext_S
  ext_C
  ext_V
  ext_H
]
