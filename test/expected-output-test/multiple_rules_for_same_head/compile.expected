deepdive.schema.variables {
Q.label: Boolean

}

deepdive.extraction.extractors.ext_S {
sql: """
SELECT R0.a AS column_0
FROM R R0
   , R R1
WHERE R1.a = R0.b
  AND R0.a > 100
UNION ALL
SELECT R0.a AS column_0
FROM R R0
   , R R1
WHERE R1.a = R0.b
  AND R0.a < -100
UNION ALL
SELECT R0.a AS column_0
FROM R R0
   , R R1
WHERE R1.a = R0.b
  AND R0.a = 0
UNION ALL
SELECT R0.a AS column_0
FROM S_0 R0
UNION ALL
SELECT R0.a AS column_0
FROM S_1 R0
UNION ALL
SELECT R0.a AS column_0
FROM S_2 R0
"""
input_relations: [
  R
  S_0
  S_1
  S_2
]
style: sql_extractor
output_relation: S
materialize: false

}

deepdive.extraction.extractors.ext_T___0_by_f {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: T___0
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE R0.a > 1000
"""

}

deepdive.extraction.extractors.ext_T {
sql: """
SELECT R0.a AS column_0
FROM T___0 R0
UNION ALL
SELECT R0.a AS column_0
FROM T___1 R0
UNION ALL
SELECT R0.a AS column_0
FROM T___2 R0
UNION ALL
SELECT R0.a AS column_0
FROM T___3 R0
"""
input_relations: [
  T___0
  T___1
  T___2
  T___3
]
style: sql_extractor
output_relation: T
materialize: false

}

deepdive.extraction.extractors.ext_T___1_by_f {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: T___1
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE 10 < R0.a
  AND R0.a < 20
"""

}

deepdive.extraction.extractors.ext_T___2_by_f {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: T___2
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE 100 < R0.a
  AND R0.a < 200
"""

}

deepdive.extraction.extractors.ext_S_0_by_f {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: S_0
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE R0.a < 0
"""

}

deepdive.extraction.extractors.ext_S_1_by_f {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: S_1
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE R0.a > 0
"""

}

deepdive.extraction.extractors.ext_T___3_by_f_1 {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: T___3
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
"""

}

deepdive.extraction.extractors.ext_S_2_by_f_1 {
parallelism: ${PARALLELISM}
input_relations: [
  R
]
style: tsv_extractor
output_relation: S_2
udf: """/bin/false"""
input_batch_size: ${INPUT_BATCH_SIZE}
input: """
SELECT R0.a AS column_0
     , R0.b AS column_1
FROM R R0
WHERE R0.a > 0
"""

}

deepdive.inference.factors.inf_istrue_Q {
input_query: """
SELECT R0.id AS "Q.R0.id"
     , R0.x AS "dd_weight_column_0"
FROM Q R0
   , S R1
WHERE R1.a = R0.x
  AND R0.x > 1000
"""
function: """Imply(Q.R0.label)"""
weight: """?(dd_weight_column_0)"""
input_relations: [
  Q
  S
]

}

deepdive.inference.factors.inf1_istrue_Q {
input_query: """
SELECT R0.id AS "Q.R0.id"
FROM Q R0
   , S R1
WHERE R1.a = R0.x
  AND R0.x = 0
"""
function: """Imply(Q.R0.label)"""
weight: """1.0"""
input_relations: [
  Q
  S
]

}

deepdive.inference.factors.inf_imply_Q_Q {
input_query: """
SELECT R0.id AS "Q.R0.id"
     , R1.id AS "Q.R1.id"
     , R0.x AS "dd_weight_column_0"
FROM Q R0
   , Q R1
   , S R2
   , R R3
   , S R4
WHERE R2.a = R0.x
  AND R3.a = R0.x
  AND R3.b = R1.x
  AND R4.a = R1.x
"""
function: """Imply(Q.R0.label, Q.R1.label)"""
weight: """?(dd_weight_column_0)"""
input_relations: [
  Q
  S
  R
]

}

deepdive.inference.factors.inf1_imply_Q_Q {
input_query: """
SELECT R0.id AS "Q.R0.id"
     , R1.id AS "Q.R1.id"
FROM Q R0
   , Q R1
   , S R2
   , R R3
   , S R4
WHERE R2.a = R0.x
  AND R3.a = R0.x
  AND R3.b = R1.x
  AND R4.a = R1.x
  AND (R0.x + R1.x) < 1000
"""
function: """Imply(Q.R0.label, Q.R1.label)"""
weight: """-10.0"""
input_relations: [
  Q
  S
  R
]

}

deepdive.extraction.extractors.ext_T__3 {
sql: """
SELECT R0.a AS column_0
FROM T R0
"""
input_relations: [
  T
]
style: sql_extractor
output_relation: T__3
materialize: false

}

deepdive.pipeline.run: ${PIPELINE}

deepdive.pipeline.pipelines.extraction: [
  ext_S
  ext_T___0_by_f
  ext_T
  ext_T___1_by_f
  ext_T___2_by_f
  ext_S_0_by_f
  ext_S_1_by_f
  ext_T___3_by_f_1
  ext_S_2_by_f_1
  ext_T__3
]

deepdive.pipeline.pipelines.inference: [
  inf_istrue_Q
  inf1_istrue_Q
  inf_imply_Q_Q
  inf1_imply_Q_Q
]

deepdive.pipeline.pipelines.endtoend: [
  ext_S
  ext_T___0_by_f
  ext_T
  ext_T___1_by_f
  ext_T___2_by_f
  ext_S_0_by_f
  ext_S_1_by_f
  ext_T___3_by_f_1
  ext_S_2_by_f_1
  ext_T__3
  inf_istrue_Q
  inf1_istrue_Q
  inf_imply_Q_Q
  inf1_imply_Q_Q
]

