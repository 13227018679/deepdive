
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }
  

      deepdive.schema.variables {
        has_spouse.label: Boolean
      }
    

      deepdive.extraction.extractors.extraction_rule_8 {
        sql: """ DROP VIEW IF EXISTS ext_people_input;
        CREATE VIEW ext_people_input AS 
          SELECT R0.sentence_id AS "sentences.R0.sentence_id" , R0.words AS "sentences.R0.words" , R0.ner_tags AS "sentences.R0.ner_tags" 
          FROM sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_16 {
        sql: """ DROP VIEW IF EXISTS ext_has_spouse_features_input;
        CREATE VIEW ext_has_spouse_features_input AS 
          SELECT R0.words AS "sentences.R0.words" , R1.relation_id AS "has_spouse_candidates.R1.relation_id" , R2.start_position AS "people_mentions.R2.start_position" , R2.length AS "people_mentions.R2.length" , R3.start_position AS "people_mentions.R3.start_position" , R3.length AS "people_mentions.R3.length" 
          FROM sentences R0, has_spouse_candidates R1, people_mentions R2, people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_10" ,  "extraction_rule_6" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_12 {
        sql: """ DROP VIEW IF EXISTS ext_has_spouse_input;
        CREATE VIEW ext_has_spouse_input AS 
          SELECT R0.sentence_id AS "people_mentions.R0.sentence_id" , R0.mention_id AS "people_mentions.R0.mention_id" , R0.text AS "people_mentions.R0.text" , R1.mention_id AS "people_mentions.R1.mention_id" , R1.text AS "people_mentions.R1.text" 
          FROM people_mentions R0, people_mentions R1
        WHERE R1.sentence_id = R0.sentence_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_6" ]
      }
    

        deepdive.extraction.extractors.extraction_rule_6 {
          input: """ SELECT * FROM ext_people_input
          """
          output_relation: "people_mentions"
          udf: "/Users/feiran/workspace/release/deepdive/app/spouse_datalog/udf/ext_people.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_8" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_14 {
          input: """ SELECT * FROM ext_has_spouse_features_input
          """
          output_relation: "has_spouse_features"
          udf: "/Users/feiran/workspace/release/deepdive/app/spouse_datalog/udf/ext_has_spouse_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_16" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_10 {
          input: """ SELECT * FROM ext_has_spouse_input
          """
          output_relation: "has_spouse_candidates"
          udf: "/Users/feiran/workspace/release/deepdive/app/spouse_datalog/udf/ext_has_spouse.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ]
        }
      

      deepdive.extraction.extractors.extraction_rule_has_spouse {
        sql: """ DROP TABLE IF EXISTS has_spouse;
        CREATE TABLE has_spouse AS
        SELECT DISTINCT 0 as id, R0.relation_id, R0.is_true AS label 
          FROM has_spouse_candidates R0, has_spouse_features R1
        WHERE R1.relation_id = R0.relation_id 
          
        """
        style: "sql_extractor"
        dependencies: [ "extraction_rule_10" ,  "extraction_rule_14" ]
      }
    

        deepdive.inference.factors.factor_has_spouse_0 {
          input_query: """
          SELECT R0.id AS "has_spouse.R0.id" , R2.feature AS "has_spouse_features.R2.feature"  
          FROM has_spouse R0, has_spouse_candidates R1, has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(has_spouse.R0.label)"
          weight: "?(has_spouse_features.R2.feature)"
        }
      
