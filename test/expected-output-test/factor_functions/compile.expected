deepdive.schema.variables {
S.dd_label: Boolean
Q.dd_label: Boolean

}

deepdive.inference.factors.inf_imply_Q_Q {
input_query: """
SELECT dd_id_0.dd_id AS "Q.R0.dd_id"
     , R0.x AS "Q.R0.x"
     , dd_id_1.dd_id AS "Q.R1.dd_id"
     , R1.x AS "Q.R1.x"
     , R1.x AS "dd_weight_column_0"
FROM Q R0
   , Q R1
   , R R2
   , dd_variables_Q AS dd_id_0
   , dd_variables_Q AS dd_id_1
WHERE R2.a = R0.x
  AND R2.b = R1.x
  AND R0.x = dd_id_0.x
  AND R1.x = dd_id_1.x
"""
function: """Imply(Q.R0.dd_label, Q.R1.dd_label)"""
weight: """?(dd_weight_column_0)"""
input_relations: [
  Q
  R
]

}

deepdive.inference.factors.inf_equal_Q_not_Q {
input_query: """
SELECT dd_id_0.dd_id AS "Q.R0.dd_id"
     , R0.x AS "Q.R0.x"
     , dd_id_1.dd_id AS "Q.R1.dd_id"
     , R1.x AS "Q.R1.x"
     , R1.x AS "dd_weight_column_0"
FROM Q R0
   , Q R1
   , R R2
   , dd_variables_Q AS dd_id_0
   , dd_variables_Q AS dd_id_1
WHERE R2.a = R0.x
  AND R2.b = R1.x
  AND R0.x = dd_id_0.x
  AND R1.x = dd_id_1.x
"""
function: """Equal(Q.R0.dd_label, !Q.R1.dd_label)"""
weight: """?(dd_weight_column_0)"""
input_relations: [
  Q
  R
]

}

deepdive.pipeline.run: ${PIPELINE}

deepdive.pipeline.pipelines.inference: [
  inf_imply_Q_Q
  inf_equal_Q_not_Q
]

deepdive.pipeline.pipelines.endtoend: [
  inf_imply_Q_Q
  inf_equal_Q_not_Q
]

