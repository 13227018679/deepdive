
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: MATERIALIZATION
    }
    


      deepdive.schema.variables {
        cancer.label: Boolean
      }
    

        deepdive.extraction.extractors.extraction_rule_2 {
          sql: """ DROP TABLE IF EXISTS person_smokes CASCADE;
          CREATE TABLE
          person_smokes(person_id bigint,
             smokes boolean,
             dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_4 {
          sql: """ DROP TABLE IF EXISTS smoke CASCADE;
          CREATE TABLE
          smoke(person_id bigint,
     id bigint,
     label boolean,
     dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_5 {
          sql: """ DROP TABLE IF EXISTS cancer CASCADE;
          CREATE TABLE
          cancer(person_id bigint,
      id bigint,
      label boolean,
      dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_3 {
          sql: """ DROP TABLE IF EXISTS friends CASCADE;
          CREATE TABLE
          friends(person_id bigint,
       friend_id bigint,
       dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_1 {
          sql: """ DROP TABLE IF EXISTS person_has_cancer CASCADE;
          CREATE TABLE
          person_has_cancer(person_id bigint,
                 has_cancer boolean,
                 dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_0 {
          sql: """ DROP TABLE IF EXISTS person CASCADE;
          CREATE TABLE
          person(person_id bigint,
      name text,
      dd_count int)
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_7 {
        sql: """ 
        INSERT INTO cancer SELECT DISTINCT R0.person_id, 0 as id, R0.has_cancer AS label , R0.dd_count AS dd_count
          FROM person_has_cancer R0
        
          
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_6 {
        sql: """ 
        INSERT INTO smoke 
            SELECT R0.person_id AS "person_smokes.R0.person_id" , R0.dd_count AS "dd_count" 
            FROM person_smokes R0
        
        """
        style: "sql_extractor"
          
      }
    

        deepdive.inference.factors.cancer_0 {
          input_query: """
          SELECT R0.id AS "cancer.R0.id" , R1.id AS "smoke.R1.id"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
          FROM cancer R0, smoke R1, person_smokes R2
        WHERE R1.person_id = R0.person_id  AND R2.person_id = R0.person_id """
          function: "Imply(smoke.R1.label, cancer.R0.label)"
          weight: "3.0"
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_2, extraction_rule_4, extraction_rule_5, extraction_rule_3, extraction_rule_1, extraction_rule_0]
deepdive.pipeline.pipelines.extraction: [extraction_rule_7, extraction_rule_6]
deepdive.pipeline.pipelines.inference: [cancer_0]
